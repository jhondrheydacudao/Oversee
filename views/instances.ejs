<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Executorx Hosting Panel</title>

  <!-- Favicon -->
  <link rel="icon" href="https://yt3.googleusercontent.com/IVqzx0L3Ffpapttg-WK5yU9frk4AIVKixHnmmQjQ7RLrt4e66-7Ox6srKG_QVat5ceEq-98-s9s=s160-c-k-c0x00ffffff-no-rj" type="image/png">

  <!-- Fade-in CSS -->
  <style>
    .fade-in {
      animation: fadeIn 1s ease-in-out;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }
  </style>

</head>
<body>
  <%- include('components/template') %>
  <main class="container flex-grow px-4 py-8 mx-auto">
    <div class="flex items-center justify-between w-full pb-4 mx-auto">
      <div class="flex flex-col">
        <h1 class="text-xl font-semibold mb-0.5 heavy">Instances</h1>
        <p class="text-gray-400 text-md">Overview of your servers on <%= name %>.</p>
      </div>
    
      <div class="flex items-center gap-3 admin-actions">
        <% if (req.user.admin === true) { %>
          <div class="relative inline-block" x-data="{ open: false }">
            <button @click="open = !open" class="flex items-center justify-center gap-2 px-5 text-sm font-medium text-white transition-all duration-200 bg-indigo-500 rounded-full shadow hover:scale-95 h-11 hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-800 focus:ring-offset-2 ring-offset-gray-200 hover:shadow-none">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 13.5V3.75m0 9.75a1.5 1.5 0 0 1 0 3m0-3a1.5 1.5 0 0 0 0 3m0 3.75V16.5m12-3V3.75m0 9.75a1.5 1.5 0 0 1 0 3m0-3a1.5 1.5 0 0 0 0 3m0 3.75V16.5m-6-9V3.75m0 3.75a1.5 1.5 0 0 1 0 3m0-3a1.5 1.5 0 0 0 0 3m0 9.75V10.5" />
              </svg>
              <span>Filter</span>
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" class="transition-transform duration-200 size-4" :class="open ? 'rotate-180' : ''">
                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
              </svg>
            </button>
            <div x-show="open" x-transition:enter="transition ease-out duration-200" x-transition:leave="transition ease-in duration-200" class="absolute right-0 w-48 mt-2 border shadow-lg rounded-xl bg-white/5 backdrop-blur-xl border-white/10">
              <div class="py-2">
                <% if (req.query.see == 'other') { %>
                  <a href="/instances" class="flex items-center gap-2 px-4 py-2.5 text-sm text-white/90 hover:bg-white/10 transition-colors">
                    <%= req.translations.showingYourInstances %>
                  </a>
                <% } else { %>
                  <a href="/instances?see=other" class="flex items-center gap-2 px-4 py-2.5 text-sm text-white/90 hover:bg-white/10 transition-colors">
                    <%= req.translations.seeAllInstances %>
                  </a>
                <% } %>
              </div>
            </div>
          </div>
        <% } %>
      </div>
    </div>

    <!-- Servers List Header -->
    <div class="flex grid flex-col items-center grid-cols-12 gap-4 px-6 py-3 mt-6 text-sm font-medium text-white/50 fade-in">
      <div class="col-span-2">Server</div>
      <div class="col-span-2">Status</div>
      <div class="col-span-2">Memory</div>
      <div class="col-span-2">CPU</div>
      <div class="col-span-2">IP Address</div>
    </div>
  
    <!-- Instances Section -->
    <div>
      <script>
        const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
      
        function updateRamUsage(stats, instanceId) {
          const ramStatsUsage = stats.memory_stats.usage || 0;
          const ramStatsLimit = stats.memory_stats.limit || 0;
      
          const ramUsageRaw = ramStatsUsage / 1024 / 1024 || 0;
          const ramLimitRaw = ramStatsLimit / 1024 / 1024 || 0;
          const ramUsagePercent = (ramLimitRaw > 0) ? ((ramUsageRaw / ramLimitRaw) * 100).toFixed(2) : '0.00';
          
          document.getElementById(`ramUsage_${instanceId}`).style.width = `${ramUsagePercent}%`;
          document.getElementById(`ramUsagetext_${instanceId}`).textContent = `${ramUsagePercent}%`;
        }
      
        function updateCpuUsage(stats, instanceId) {
          const cpuDelta = stats.cpu_stats.cpu_usage.total_usage - stats.precpu_stats.cpu_usage.total_usage;
          const systemCpuDelta = stats.cpu_stats.system_cpu_usage - stats.precpu_stats.system_cpu_usage;
          let cpuUsagePercent = ((cpuDelta / systemCpuDelta) * 100).toFixed(2);
      
          if (isNaN(cpuUsagePercent)) {
            cpuUsagePercent = 0;
          }
      
          document.getElementById(`cpuUsage_${instanceId}`).style.width = `${cpuUsagePercent}%`;
          document.getElementById(`cpuUsagetext_${instanceId}`).textContent = `${cpuUsagePercent}%`;
        }
      
        function updateStatus(stats, instanceId) {
          const statusElement = document.getElementById(`status_${instanceId}`);
          const statusElementtext = document.getElementById(`status-color_${instanceId}`);
          const ramUsageRaw = stats.memory_stats.usage / 1024 / 1024 || 0;
          
          if (ramUsageRaw > 1) {
            statusElement.textContent = 'Online';
            statusElement.className = 'text-emerald-500';
            statusElementtext.className = 'size-2 rounded-full bg-emerald-500 mr-2';
          } else {
            statusElement.textContent = 'Offline';
            statusElement.className = 'text-red-500';
            statusElementtext.className = 'size-2 rounded-full bg-red-500 mr-2';
          }
        }

        function executenodedown(instanceId) {
          const statusElement = document.getElementById(`status_${instanceId}`);
          const statusElementtext = document.getElementById(`status-color_${instanceId}`);

          statusElement.textContent = 'Node Offline';
          statusElement.className = 'text-red-500';
          statusElementtext.className = 'size-2 rounded-full bg-red-500 mr-2';
        }

        function executecontainernotfound(instanceId) {
          const statusElement = document.getElementById(`status_${instanceId}`);
          const statusElementtext = document.getElementById(`status-color_${instanceId}`);

          statusElement.textContent = 'Container not found';
          statusElement.className = 'text-yellow-500';
          statusElementtext.className = 'size-2 rounded-full bg-yellow-500 mr-2';
        }

        function isValidJson(str) {
          try {
            JSON.parse(str);
          } catch (e) {
            return false;
          }
          return true;
        }
      
        function initStatsWebSocket(instanceId) {
          const statsWs = new WebSocket(`${protocol}://${window.location.hostname}:${window.location.port}/stats/${instanceId}`);

          statsWs.onmessage = event => {
            if (event.data.includes("The HydraDaemon instance appears to be down. Retrying...")) {
              console.warn('HydraDaemon instance appears to be down. Executing node down handler...');
              executenodedown(instanceId);
              return;
            }
        
            if (event.data.includes("Container not found")) {
              executecontainernotfound(instanceId);
              return;
            }

            if (isValidJson(event.data)) {
              const stats = JSON.parse(event.data);
              if (stats.error) {
                console.error('Error fetching stats:', stats.error);
                return;
              }
          
              updateRamUsage(stats, instanceId);
              updateCpuUsage(stats, instanceId);
              updateStatus(stats, instanceId);
            } else {
              console.log('Received non-JSON data:', event.data);
            }
          };

          statsWs.onerror = error => {
            console.error('WebSocket error:', error);
          };
        
          statsWs.onclose = () => {
            console.log('WebSocket closed for instance:', instanceId);
          };

          statsWs.onclose = () => {
            console.log(`WebSocket Stats connection for instance ${instanceId} closed, attempting to reconnect...`);
            setTimeout(() => initStatsWebSocket(instanceId), 3000);
          };
        }
      </script>          

      <% instances.forEach(function (instance) { %>
        <div class="grid items-center grid-cols-12 gap-4 px-6 py-4 mb-4 transition border-2 border-transparent border-dashed cursor-pointer server-row bg-white/5 rounded-2xl hover:bg-white/10 hover:border-white/5 fade-in"
            id="instanceContainer_<%= instance.Id %>" 
            data-instance-id="<%= instance.Id %>"
            onclick="window.location.href='../instance/<%= instance.Id %>'">
            
            <!-- Server Name & Node -->
            <div class="col-span-2">
                <div class="font-medium text-white"><%= instance.Name %></div>
            </div>
    
            <!-- Status -->
            <div class="col-span-2 ">
                <div class="inline-flex items-center px-3 py-1 text-xs font-medium rounded-full bg-zinc-500/20 text-zinc-300">
                    <div id="status-color_<%= instance.Id %>" class="mr-2 rounded-full size-2 bg-zinc-400"></div>
                    <span id="status_<%= instance.Id %>">Connecting...</span>
                </div>
            </div>
    
            <!-- Memory Usage -->
            <div class="col-span-2">
                <div class="flex items-center gap-2">
                    <div class="w-full bg-white/10 rounded-full h-1.5">
                        <div id="ramUsage_<%= instance.Id %>" class="bg-blue-500 h-1.5 rounded-full transition-all" style="width: 0%"></div>
                    </div>
                    <span id="ramUsagetext_<%= instance.Id %>" class="text-xs">Connecting...</span>
                </div>
            </div>
    
            <!-- CPU Usage -->
            <div class="col-span-2">
                <div class="flex items-center gap-2">
                    <div class="w-full bg-white/10 rounded-full h-1.5">
                        <div id="cpuUsage_<%= instance.Id %>" class="bg-blue-500 h-1.5 rounded-full transition-all" style="width: 0%"></div>
                    </div>
                    <span id="cpuUsagetext_<%= instance.Id %>" class="text-xs">Connecting...</span>
                </div>
            </div>
    
            <div class="col-span-2 ">
                <div class="inline-flex items-center px-3 py-1 text-xs font-medium rounded-full bg-zinc-500/20 text-zinc-300">
                    <div class="mr-2 rounded-full size-2 bg-emerald-400"></div>
                    <span class="status-text"><%= instance.Node.address %>:<%= instance.Primary %></span>
                </div>
            </div>
        </div>
  
        <!-- Initialize WebSocket for each instance -->
        <script>
            initStatsWebSocket('<%= instance.Id %>');
        </script>
    <% }); %>      
    </div>
  </main>
</body>
</html>
